syntax = "proto3";
option java_package = "pers.ontology.blaze.protocol"; //
option java_outer_classname = "TransportProtocol"; //传输协议
import "google/protobuf/any.proto";

//简称:
//     1、im server ---> IS (即时通讯服务器)
//     2、Request ---> R
//     3、Ack:CONFIRM ---> A:C
//     4、Notify ---> N
//     5、Ack:CONFIRM_NOTIFY ---> A:CN
//     6、Ack:CONFIRM_CONFIRM_NOTIFY ---> A:CCN
//     7、Ack:ARRIVE ---> A:A

// 消息发送示意图如下：

// 第一部分

//                (1)Request                     (3)Notify
//   A-client -------------------->im server-------------------->B-client
//                                     ｜
//                (2)A:C               ｜
//   A-client <------------------------┚
//

// 第二部分

//                 (6)A:A                         (4)A:CN
//   A-client <--------------------im server<----------------B-client
//                                     ｜
//                                     ｜        (5)A:CCN
//                                     ┖------------------->B-client
//

//   上图中(1)和(6)是对应关系，一个客户端发送了Request必须收到Ack:ARRIVE才能确保消息送达。
//期望六次请求完成消息的可靠投递，但实际情况存在信息丢失(可能是服务器、网络问题)：
//       * Request   A:C 丢失
//       * Notify   A:CN   A:CCN   A:A 丢失
//所以消息的投递可靠性保证的前提是报文不丢失，将通过其他的机制来保证报文不丢失

//客户端请求“：
//   客户端向im server发送的消息”
message Request {

    Header header = 1;
    google.protobuf.Any body = 2;
}

//告知已收到
message Ack {

    //
    enum Type {
        //IS确认收到客户端消息：
        //    (A-client)向(B-client)发送了一条消息，这条消息会经过IS,当到达IS时，
        //  IS将发送给(A-client)一条CONFIRM消息，以说明IS收到(A-client)的消息。
        CONFIRM = 0;

        //客户端确认收到IS通知：
        //    (B-client)收到IS向其发送的Notify，将向IS发送confirm-notify，
        // 其意义是告诉IS，(B-client)已经收到消息。
        CONFIRM_NOTIFY = 3;

        //IS确认收到“‘客户端确认收到消息’”：
        //     IS收到(B-client)发送的CONFIRM-NOTIFY的时候IS将发送给(B-client)
        //  一条CONFIRM_CONFIRM_NOTIFY消息,以说明服务器收到(B-client)的CONFIRM-NOTIFY。
        CONFIRM_CONFIRM_NOTIFY = 2;

        //消息已到达：
        //     (A-client)向(B-client)发送的消息已经送达(B-client)，这时服务器将发送给(A-client)
        //  一条ARRIVE消息,说明消息可靠到达。
        ARRIVE = 1;


    }
    string messageId = 1;

    string timestamp = 2;

    Type type = 3;
}

//服务器通知
message Notify {
    Header header = 1;
    google.protobuf.Any body = 2;
}

//头部
message Header {
    string timestamp = 1;
}